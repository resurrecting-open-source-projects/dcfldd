name: full-check

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - cc: gcc-14
            clang_major_version: null
            runs-on: ubuntu-24.04
          - cc: gcc-15
            clang_major_version: null
            runs-on: ubuntu-24.04
          - cc: clang-19
            clang_major_version: 19
            runs-on: ubuntu-22.04
          - cc: musl-gcc
            clang_major_version: null
            runs-on: ubuntu-24.04

    runs-on: ${{ matrix.runs-on }}

    steps:
    - uses: actions/checkout@v4
    - name: gcc_15_repo
      if: "${{ matrix.cc == 'gcc-15' }}"
      run: |
           set -x
           # The repository is at home at https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test .
           # NOTE: plucky is 25.04 (not 24.04 LTS)
           wget -O - 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xc8ec952e2a0e1fbdc5090f6a2c277a0a352154e5' | sudo apt-key add -
           sudo add-apt-repository 'deb https://ppa.launchpadcontent.net/ubuntu-toolchain-r/test/ubuntu plucky main'
           sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ plucky main'
    - name: gcc_15_install
      if: "${{ matrix.cc == 'gcc-15' }}"
      run: |
           set -x
           sudo apt-get install --yes --no-install-recommends -V \
             binutils \
             gcc-15
           apt-cache policy binutils
    - name: clang_repo
      if: "${{ contains(matrix.cc, 'clang') }}"
      run: |
           set -x
           source /etc/os-release
           wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
           sudo add-apt-repository "deb http://apt.llvm.org/${UBUNTU_CODENAME}/ llvm-toolchain-${UBUNTU_CODENAME}-${{ matrix.clang_major_version }} main"
    - name: clang_install
      if: "${{ contains(matrix.cc, 'clang') }}"
      run: |-
           sudo apt-get update
           sudo apt-get install --yes --no-install-recommends -V \
             clang-${{ matrix.clang_major_version }} \
             libclang-rt-${{ matrix.clang_major_version }}-dev
    - name: musl_tools_install
      if: "${{ contains(matrix.cc, 'musl') }}"
      run: |-
           sudo apt-get update
           sudo apt-get install --yes --no-install-recommends -V \
             musl-tools
    - name: first_build
      run: |
           ./autogen.sh
           ./configure CC=${{ matrix.cc }} CFLAGS='-std=c99 -Wall -Wextra -pedantic' \
             || { cat config.log ; false ; }
           make
           sudo make install
           sudo make uninstall
           make distclean
    - name: second_build
      run: |
           configure_args=(
             CC=${{ matrix.cc }}
           )

           if [[ "${{ matrix.cc }}" != musl-gcc ]]; then
             configure_args+=(
               CFLAGS='-g -fsanitize=address,undefined -fno-sanitize-recover=all -fno-omit-frame-pointer'
               LDFLAGS='-g -fsanitize=address,undefined'
             )
           fi

           ./autogen.sh
           ./configure "${configure_args[@]}" \
             || { cat config.log ; false ; }
           make
           sudo make install
    - name: run_program
      run: |
           set -x
           dcfldd if=.github/workflows/test.txt of=/tmp/test2.txt hash=md5,sha1,sha256,sha384,sha512 2>.github/workflows/actual-stderr.txt
           diff -u .github/workflows/{actual,expected}-stderr.txt
           ls -lh /tmp/test2.txt
           head -n3 /tmp/test2.txt | grep -i autopkgtest
    - name: test_make_dist
      run: |
           make distclean
           ./autogen.sh
           ./configure CC=${{ matrix.cc }}
           make dist
           mkdir test_dist
           mv dcfldd-*.tar.gz test_dist
           cd test_dist
           pwd
           tar -xvf dcfldd-*.tar.gz
           rm -f dcfldd-*.tar.gz
           cd dcfldd-*
           ./autogen.sh
           ./configure CC=${{ matrix.cc }} --with-bash-completion
           make
           ls
           sudo make install
           sudo make uninstall
           make distclean
