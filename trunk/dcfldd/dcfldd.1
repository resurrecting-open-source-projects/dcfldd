.TH DCFLDD "1" "v1.4 - RBF DATE 2007" " " "dcfldd Reference Guide"
.SH NAME
dcfldd \- convert and copy a file with forensic options

.SH SYNOPSIS
.B dcfldd [\fB OPTION \fR]...

.SH DESCRIPTION

dcfldd is an enhanced version of GNU dd with features useful for 
forensics and security. Based on the dd program found in the GNU 
Coreutils package, dcfldd can also compute hashes on the fly, 
produce a status message while imaging, wipe drives easily, output
to multiple files, split the output, and pipe its output to 
different file types. 


.TP
\fBbs=BYTES\fR
force both the input and output block size to BYTES

.TP
\fBcbs=BYTES\fR
convert BYTES bytes at a time

.TP
\fBconv=KEYWORDS\fR
convert the file as per the comma separated keyword list. See the
KEYWORDS section below.

.TP
\fBcount=BLOCKS\fR
copy only BLOCKS input blocks

.TP
\fBibs=BYTES\fR
read BYTES bytes at a time

.TP
\fBif=FILE\fR
read from FILE instead of stdin

.TP
\fBobs=BYTES\fR
write BYTES bytes at a time

.TP
\fBof=FILE\fR
write to FILE instead of stdout. Note that you can use the \fBof\fR
parameter more than once to write to multiple file simultaneously.

.TP
\fBof:=COMMAND\fR
exec and write output to process COMMAND

.TP
\fBseek=BLOCKS\fR
skip BLOCKS obs\-sized blocks at start of output

.TP
\fBskip=BLOCKS\fR
skip BLOCKS ibs\-sized blocks at start of input

.TP
\fBpattern=HEX\fR
use the specified binary pattern as input

.TP
\fBtextpattern=TEXT\fR
use repeating TEXT as input

.TP
\fBerrlog=FILE\fR
send error messages to FILE as well as stderr

.TP
\fBhashwindow=BYTES\fR
perform a hash on every BYTES amount of data

.TP
\fBhash=NAME\fR
Compute hashes using the comma separated list NAME. Supported
algorithms are md5, sha1, sha256, sha386, and sha512. The default
algorithm is MD5. 

.TP
\fBhashlog=FILE\fR
send hash outputs to FILE instead of stderr. If you are using
multiple hash algorithms, you
can send each to a seperate file using the
convention ALGORITHMlog=FILE, for example
md5log=FILE1, sha1log=FILE2, etc.

.TP
\fBhashlog:=COMMAND\fR
exec and write hashlog to process COMMAND. 
ALGORITHMlog:=COMMAND also works in the same fashion

.TP
\fBlog=FILE\fR
Writes the information generated by \fBhaslog\fR and \fBerrlog\fR
to the single file FILE. Note that this operation \fIappends\fR FILE
if it already exists. 

.TP
\fBhashconv=[before|after]\fR
perform the hashing before or after the conversions

.TP
\fBhashformat=FORMAT\fR
display each hashwindow according to FORMAT. The hash format is
a mini-language described in the section FORMAT, below.

.TP
\fBtotalhashformat=FORMAT\fR
display the total hash value according to FORMAT

.TP
\fBstatus=[on|off]\fR
display a continual status message on stderr. The default state is on.

.TP
\fBstatusinterval=N\fR
update the status message every N blocks. The default value is 256.
default value is 256

.TP
\fBsizeprobe=[if|of]\fR
determine the size of the input or output file when printing status messages.
This option enables a percentage done indicator. \fBDo not use this option
against a tape device.\fR

.TP
\fBsplit=BYTES\fR
write every BYTES amount of data to a new file. 
This operation applies \fBonly\fR to any of=FILE that follows it.

.TP
\fBsplitformat=TEXT\fR
the file extension format for split operation. TEXT should be a combination
of 'a' (alpha), 'n' (numeric), and 'd' (digit) characters. 
The length of this string indicates
how many digits to include in the suffix. The default format is "nnn".
Although you cannot use 'd' with any other characters, 
you may use any number of 'a' or 'n' characters.
.br
\fB\fR
Note that the split and splitformat options take effect
only for output files specified AFTER these
options appear in the command line.  Likewise,
you may specify these several times for
for different output files within the same
command line. you may use as many digits in
any combination you would like.
(e.g. "anaannnaana" would be valid, but
quite insane)
.br

.TP
\fBvf=FILE\fR
verify that FILE matches the specified input

.TP
\fBverifylog=FILE\fR
send verify results to FILE instead of stderr

.TP
\fBverifylog:=COMMAND\fR
exec and write verify results to process COMMAND

.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit

.SH FORMAT Strings
The structure of of FORMAT may contain any valid text and special variables.
The built\-in variables are used the following format: #variable_name#
To pass FORMAT strings to the program from a command line, it may be
necessary to surround your FORMAT strings with "quotes."
The built\-in variables are listed below:
.TP
window_start
The beginning byte offset of the hashwindow
.TP
window_end
The ending byte offset of the hashwindow
.TP
block_start
The beginning block (by input blocksize) of the window
.TP
block_end
The ending block (by input blocksize) of the hash window
.TP
hash
The hash value
.TP
algorithm
The name of the hash algorithm
.SS "For example, the default FORMAT for hashformat and totalhashformat are:"
.IP
hashformat="#window_start# \- #window_end#: #hash#"
totalhashformat="Total (#algorithm#): #hash#"
.SS "The FORMAT structure accepts the following escape codes:"
.TP
\en
Newline
.TP
\et
Tab
.TP
\er
Carriage return
.TP
\e\e
Insert the '\e' character
.TP
##
Insert the '#' character as text, not a variable

.SH BLOCKS and BYTES
BLOCKS and BYTES may be followed by a \fIcase sensitive\fR 
multiplicative suffix:
.br
c  = 1
.br
w  = 2
.br
b  = 512
.br
kD = 1000
.br
k  = 1024
.br
MD = 1,000,000
.br
M  = 1,048,576 
.br
GD = 1,000,000,000
.br
G  = 1,073,741,824
.br
and so on for T, P, E, Z, Y. 


.SH KEYWORDS

Each KEYWORD may be:
.TP
ascii
from EBCDIC to ASCII
.TP
ebcdic
from ASCII to EBCDIC
.TP
ibm
from ASCII to alternated EBCDIC
.TP
block
pad newline\-terminated records with spaces to cbs\-size
.TP
unblock
replace trailing spaces in cbs\-size records with newline
.TP
lcase
change upper case to lower case
.TP
notrunc
do not truncate the output file
.TP
ucase
change lower case to upper case
.TP
direct
bypass operating system caching. Good for disks with bad blocks
.TP
swab
swap every pair of input bytes
.TP
noerror
continue after read errors
.TP
sync
pad every input block with NULs to ibs\-size; when used
with block or unblock, pad with spaces rather than NULs

.SH AUTHOR
dcfldd was written by Nicholas Harbour and is now maintain by him
and Jesse Kornblum. The origianl GNU dd was written by 
Paul Rubin, David MacKenzie and Stuart Kemp.

.SH "REPORTING BUGS"
Report bugs to nickharbour@gmail.com and research@jessekornblum.com

.SH COPYRIGHT
Copyright \(co 1985-2006 Free Software Foundation, Inc.
.br
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

.SH "SEE ALSO"
dd(1)
.PP
The full documentation for
.B dcfldd
is maintained as a Texinfo manual.  If the
.B info
and
.B dcfldd
programs are properly installed at your site, the command
.IP
.B info dcfldd
.PP
should give you access to the complete manual.
